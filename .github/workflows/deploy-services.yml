name: Deploy StatEdge Services

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (all, frontend, backend, data-collection)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frontend
          - backend
          - data-collection

jobs:
  deploy-backend:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'backend' || github.event.inputs.service == '' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd python-service
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd python-service
        # Add backend tests here when available
        echo "Backend tests completed"
    
    - name: Build backend image
      run: |
        cd python-service
        docker build -t statedge-backend:latest .
    
    - name: Deploy backend
      run: |
        echo "Backend deployment completed"
        # Add actual deployment steps here
  
  deploy-frontend:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'frontend' || github.event.inputs.service == '' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Deploy frontend
      run: |
        echo "Frontend deployment completed"
        # Add actual deployment steps here
  
  deploy-data-collection:
    if: ${{ github.event.inputs.service == 'all' || github.event.inputs.service == 'data-collection' || github.event.inputs.service == '' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install data collection dependencies
      run: |
        cd mlb-data-service
        python -m pip install --upgrade pip
        pip install -r daily_collection_requirements.txt
    
    - name: Test data collection system
      run: |
        cd mlb-data-service
        python -c "
        import daily_data_collection
        print('✅ Data collection system ready for deployment')
        "
    
    - name: Deploy data collection service
      run: |
        echo "Data collection service deployment completed"
        # Add actual deployment steps here (e.g., cron job setup)
  
  notify-deployment:
    needs: [deploy-backend, deploy-frontend, deploy-data-collection]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Deployment notification
      uses: actions/github-script@v6
      with:
        script: |
          const deploymentResults = {
            backend: '${{ needs.deploy-backend.result }}',
            frontend: '${{ needs.deploy-frontend.result }}', 
            dataCollection: '${{ needs.deploy-data-collection.result }}'
          };
          
          const successCount = Object.values(deploymentResults).filter(r => r === 'success').length;
          const totalCount = Object.values(deploymentResults).filter(r => r !== 'skipped').length;
          
          if (successCount === totalCount) {
            console.log('🎉 All deployments completed successfully!');
          } else {
            console.log(`⚠️ ${successCount}/${totalCount} deployments successful`);
          }