name: Daily Data Collection

on:
  schedule:
    # Run at 6:00 AM UTC daily (2:00 AM EST / 1:00 AM EDT)
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      date:
        description: 'Date to collect data for (YYYY-MM-DD). Leave empty for yesterday.'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (test without inserting data)'
        required: false
        default: false
        type: boolean

jobs:
  collect-data:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sports_data
          POSTGRES_USER: sports_user
          POSTGRES_PASSWORD: sports_secure_2025
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/daily_collection_requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd mlb-data-service
          python -m pip install --upgrade pip
          pip install -r daily_collection_requirements.txt

      - name: Setup database schema
        env:
          PGPASSWORD: sports_secure_2025
        run: |
          # Create required tables if they don't exist
          psql -h localhost -U sports_user -d sports_data -c "
          CREATE TABLE IF NOT EXISTS statcast (
            id SERIAL PRIMARY KEY,
            game_pk INTEGER,
            game_date DATE,
            game_year INTEGER,
            at_bat_number INTEGER,
            pitch_number INTEGER,
            batter INTEGER,
            pitcher INTEGER,
            player_name VARCHAR(255),
            pitch_type VARCHAR(10),
            release_speed DECIMAL,
            launch_speed DECIMAL,
            launch_angle DECIMAL,
            hit_distance_sc DECIMAL,
            events VARCHAR(50),
            description VARCHAR(255),
            balls INTEGER,
            strikes INTEGER,
            outs_when_up INTEGER,
            inning INTEGER,
            inning_topbot VARCHAR(10),
            stand VARCHAR(1),
            p_throws VARCHAR(1),
            home_team VARCHAR(10),
            away_team VARCHAR(10),
            home_score INTEGER,
            away_score INTEGER,
            type VARCHAR(1)
          );"
          
          psql -h localhost -U sports_user -d sports_data -c "
          CREATE TABLE IF NOT EXISTS mlb_players (
            id SERIAL PRIMARY KEY,
            player_id INTEGER UNIQUE,
            full_name VARCHAR(255),
            team_id VARCHAR(10),
            position_name VARCHAR(50),
            status_code VARCHAR(10)
          );"
          
          psql -h localhost -U sports_user -d sports_data -c "
          CREATE TABLE IF NOT EXISTS fangraphs_batting (
            \"IDfg\" INTEGER,
            \"Season\" INTEGER,
            \"Name\" VARCHAR(255),
            \"Team\" VARCHAR(10),
            \"Age\" INTEGER,
            \"G\" INTEGER,
            \"AB\" INTEGER,
            \"PA\" INTEGER,
            \"H\" INTEGER,
            \"1B\" INTEGER,
            \"2B\" INTEGER,
            \"3B\" INTEGER,
            \"HR\" INTEGER,
            \"R\" INTEGER,
            \"RBI\" INTEGER,
            \"BB\" INTEGER,
            \"IBB\" INTEGER,
            \"SO\" INTEGER,
            \"HBP\" INTEGER,
            \"SF\" INTEGER,
            \"SH\" INTEGER,
            \"GDP\" INTEGER,
            \"SB\" INTEGER,
            \"CS\" INTEGER,
            \"AVG\" DECIMAL,
            \"OBP\" DECIMAL,
            \"SLG\" DECIMAL,
            \"OPS\" DECIMAL,
            \"ISO\" DECIMAL,
            \"BABIP\" DECIMAL,
            \"wOBA\" DECIMAL,
            \"wRAA\" DECIMAL,
            \"wRC\" DECIMAL,
            \"WAR\" DECIMAL,
            \"wRC+\" INTEGER,
            \"EV\" DECIMAL,
            \"LA\" DECIMAL,
            \"Barrel%\" DECIMAL,
            \"maxEV\" DECIMAL,
            \"HardHit%\" DECIMAL,
            \"xBA\" DECIMAL,
            \"xSLG\" DECIMAL,
            \"xwOBA\" DECIMAL,
            PRIMARY KEY (\"IDfg\", \"Season\")
          );"
          
          psql -h localhost -U sports_user -d sports_data -c "
          CREATE TABLE IF NOT EXISTS fangraphs_pitching (
            \"IDfg\" INTEGER,
            \"Season\" INTEGER,
            \"Name\" VARCHAR(255),
            \"Team\" VARCHAR(10),
            \"Age\" INTEGER,
            \"W\" INTEGER,
            \"L\" INTEGER,
            \"ERA\" DECIMAL,
            \"G\" INTEGER,
            \"GS\" INTEGER,
            \"CG\" INTEGER,
            \"SHO\" INTEGER,
            \"SV\" INTEGER,
            \"IP\" DECIMAL,
            \"H\" INTEGER,
            \"R\" INTEGER,
            \"ER\" INTEGER,
            \"HR\" INTEGER,
            \"BB\" INTEGER,
            \"SO\" INTEGER,
            \"WHIP\" DECIMAL,
            \"WAR\" DECIMAL,
            \"FIP\" DECIMAL,
            \"xFIP\" DECIMAL,
            \"K/9\" DECIMAL,
            \"BB/9\" DECIMAL,
            \"HR/9\" DECIMAL,
            \"BABIP\" DECIMAL,
            \"LOB%\" DECIMAL,
            \"GB%\" DECIMAL,
            \"FB%\" DECIMAL,
            \"LD%\" DECIMAL,
            \"HR/FB\" DECIMAL,
            \"ERA-\" INTEGER,
            \"FIP-\" INTEGER,
            PRIMARY KEY (\"IDfg\", \"Season\")
          );"

      - name: Run daily data collection
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: sports_user
          DB_PASSWORD: sports_secure_2025
          DB_NAME: sports_data
        run: |
          cd mlb-data-service
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "ðŸ§ª Running in DRY RUN mode"
            python test_collection_dry_run.py
          else
            echo "ðŸš€ Running FULL data collection"
            python daily_data_collection.py
          fi

      - name: Upload collection logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: collection-logs-${{ github.run_number }}
          path: mlb-data-service/daily_collection.log
          retention-days: 30

      - name: Collection summary
        if: always()
        run: |
          echo "## Daily Data Collection Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** ${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Full Collection' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "mlb-data-service/daily_collection.log" ]; then
            echo "### Collection Log Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -n 15 mlb-data-service/daily_collection.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Daily Data Collection Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## Daily Data Collection Failure

              **Workflow Run:** https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Date:** ${new Date().toISOString()}
              **Branch:** ${context.ref}

              The automated daily data collection workflow has failed. Please check the logs and resolve the issue.

              ### Next Steps:
              1. Review the workflow logs in the link above
              2. Check database connectivity and PyBaseball API availability
              3. Run manual collection if needed:
                 \`\`\`bash
                 cd mlb-data-service
                 python daily_data_collection.py
                 \`\`\`

              ### Quick Debug:
              - Test dry run: \`python test_collection_dry_run.py\`
              - Check database: Ensure PostgreSQL is running and accessible
              - Check PyBaseball: Verify API is responsive

              This issue was automatically created by the failed workflow.`,
              labels: ['bug', 'data-collection', 'automated', 'high-priority']
            })