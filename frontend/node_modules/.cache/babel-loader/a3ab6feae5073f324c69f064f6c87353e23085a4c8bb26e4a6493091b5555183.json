{"ast":null,"code":"var _jsxFileName = \"/home/jeffreyconboy/StatEdge/frontend/src/hooks/useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI, handleAPIError } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing auth on mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        const savedUser = localStorage.getItem('user');\n        if (token && savedUser) {\n          // Verify token is still valid\n          const response = await authAPI.me();\n          setUser(response.data.user);\n        }\n      } catch (error) {\n        // Token invalid, clear local storage\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await authAPI.login(email, password);\n      const {\n        user: userData,\n        token\n      } = response.data;\n\n      // Save to localStorage\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = handleAPIError(error);\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await authAPI.register(email, password);\n      const {\n        user: userData,\n        token\n      } = response.data;\n\n      // Save to localStorage\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = handleAPIError(error);\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n  const updateTier = async newTier => {\n    try {\n      const response = await authAPI.updateTier(newTier);\n      const updatedUser = {\n        ...user,\n        tier: newTier\n      };\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return {\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = handleAPIError(error);\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateTier,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","handleAPIError","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","savedUser","response","me","data","removeItem","login","email","password","userData","setItem","JSON","stringify","success","errorMessage","register","logout","updateTier","newTier","updatedUser","tier","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jeffreyconboy/StatEdge/frontend/src/hooks/useAuth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI, handleAPIError } from '../utils/api';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing auth on mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        const savedUser = localStorage.getItem('user');\n        \n        if (token && savedUser) {\n          // Verify token is still valid\n          const response = await authAPI.me();\n          setUser(response.data.user);\n        }\n      } catch (error) {\n        // Token invalid, clear local storage\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      const response = await authAPI.login(email, password);\n      const { user: userData, token } = response.data;\n      \n      // Save to localStorage\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      setUser(userData);\n      return { success: true };\n    } catch (error) {\n      const errorMessage = handleAPIError(error);\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      const response = await authAPI.register(email, password);\n      const { user: userData, token } = response.data;\n      \n      // Save to localStorage\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      setUser(userData);\n      return { success: true };\n    } catch (error) {\n      const errorMessage = handleAPIError(error);\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n\n  const updateTier = async (newTier) => {\n    try {\n      const response = await authAPI.updateTier(newTier);\n      const updatedUser = { ...user, tier: newTier };\n      \n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      \n      return { success: true };\n    } catch (error) {\n      const errorMessage = handleAPIError(error);\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateTier,\n    isAuthenticated: !!user,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}