#!/usr/bin/env python3
"""
FIXED Player Cartoon Generator
Uses GPT-4o's NATIVE image generation (not DALL-E 3)
Properly shows the photo to GPT-4o for accurate cartoon creation
"""

import openai
import base64
import requests
from pathlib import Path
import os
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Set up OpenAI client
client = openai.OpenAI(
    api_key=os.getenv('OPENAI_API_KEY')
)

def encode_image_to_base64(image_path: str) -> str:
    """Convert image file to base64 string for API"""
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

def create_player_cartoon_fixed(image_path: str, player_name: str) -> dict:
    """
    FIXED: Create cartoon using GPT-4o's native image generation
    This properly shows the photo to GPT-4o first
    """
    print(f"🎨 Creating cartoon for {player_name} (FIXED VERSION)...")
    print(f"📷 Source image: {image_path}")
    
    try:
        # Encode the image
        base64_image = encode_image_to_base64(image_path)
        
        # CORRECT APPROACH: Use GPT-4o with native image generation
        print("🧠 Sending photo to GPT-4o for analysis and cartoon generation...")
        
        response = client.chat.completions.create(
            model="gpt-4o",  # This model has NATIVE image generation
            messages=[
                {
                    "role": "user", 
                    "content": [
                        {
                            "type": "text",
                            "text": f"""I'm showing you a professional MLB player headshot photo of {player_name}. 

Please create a hyper-realistic cartoon version of this EXACT player that:

1. **Matches this person's exact appearance**: skin tone, facial features, hair, beard/facial hair
2. **Keeps the same uniform**: team colors, logos, and uniform details from the photo
3. **Maintains the pose**: same headshot angle and composition  
4. **Cartoon style**: High-quality animated/video game style (like FIFA or NBA 2K character)
5. **Professional quality**: Suitable for sports marketing

IMPORTANT: Look carefully at the person in this photo and make sure the cartoon matches their actual appearance, ethnicity, and team uniform. Do not create a generic player.

Please generate the cartoon image now."""
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=300
        )
        
        # Check if GPT-4o generated an image
        message_content = response.choices[0].message.content
        
        # Look for image generation in the response
        if hasattr(response.choices[0].message, 'content') and response.choices[0].message.content:
            print(f"✅ GPT-4o Response: {message_content}")
            
            # Check if there are any attachments or generated images
            # Note: This is the correct way but the API structure might be different
            return {
                'success': True,
                'response': message_content,
                'player_name': player_name,
                'method': 'gpt-4o-native'
            }
        else:
            print("❌ No image was generated by GPT-4o")
            return {
                'success': False,
                'error': 'GPT-4o did not generate an image',
                'response': message_content
            }
        
    except Exception as e:
        print(f"❌ Error with GPT-4o native generation: {str(e)}")
        
        # Fallback: Try the correct DALL-E 3 approach with proper description
        print("🔄 Trying fallback: GPT-4o vision + DALL-E 3 with detailed description...")
        return create_cartoon_with_description(image_path, player_name)

def create_cartoon_with_description(image_path: str, player_name: str) -> dict:
    """
    Fallback: Get detailed description from GPT-4o Vision, then use DALL-E 3
    """
    try:
        base64_image = encode_image_to_base64(image_path)
        
        # Step 1: Get detailed description from GPT-4o Vision
        print("👁️ Getting detailed description from GPT-4o Vision...")
        
        vision_response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text", 
                            "text": f"""Please analyze this MLB player photo of {player_name} and provide a detailed description for creating a cartoon version. Include:

1. **Physical appearance**: skin tone, facial features, hair color/style, facial hair
2. **Uniform details**: team colors, logos, uniform style, cap details
3. **Pose and composition**: angle, framing, expression
4. **Key identifying features**: anything distinctive about this player

Be very specific about their actual appearance so I can create an accurate cartoon."""
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ],
            max_tokens=500
        )
        
        detailed_description = vision_response.choices[0].message.content
        print(f"📝 Detailed Description: {detailed_description}")
        
        # Step 2: Use the description to create cartoon with DALL-E 3
        print("🎨 Creating cartoon with DALL-E 3 using detailed description...")
        
        cartoon_prompt = f"""Create a hyper-realistic cartoon/animated version of this MLB player based on this detailed description:

{detailed_description}

Style: High-quality sports video game character (FIFA/NBA 2K style)
Quality: Professional sports marketing material
Format: Headshot composition matching the original photo
Important: Match the exact physical appearance and uniform details described above."""

        image_response = client.images.generate(
            model="dall-e-3",
            prompt=cartoon_prompt,
            size="1024x1024",
            quality="hd",
            n=1
        )
        
        cartoon_url = image_response.data[0].url
        revised_prompt = getattr(image_response.data[0], 'revised_prompt', 'No revised prompt available')
        
        print(f"✅ Cartoon generated with detailed description!")
        print(f"🖼️ Image URL: {cartoon_url}")
        
        return {
            'success': True,
            'cartoon_url': cartoon_url,
            'detailed_description': detailed_description,
            'revised_prompt': revised_prompt,
            'player_name': player_name,
            'method': 'vision-description-dalle3'
        }
        
    except Exception as e:
        print(f"❌ Error with description method: {str(e)}")
        return {
            'success': False,
            'error': str(e),
            'player_name': player_name
        }

def download_cartoon(cartoon_url: str, player_name: str, method: str) -> str:
    """Download the generated cartoon and save locally"""
    try:
        response = requests.get(cartoon_url)
        if response.status_code == 200:
            # Create output directory
            output_dir = Path("cartoon_output_fixed")
            output_dir.mkdir(exist_ok=True)
            
            # Create filename
            safe_name = player_name.lower().replace(' ', '-').replace('.', '')
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{safe_name}_cartoon_{method}_{timestamp}.png"
            
            output_path = output_dir / filename
            
            # Save the image
            with open(output_path, 'wb') as f:
                f.write(response.content)
            
            print(f"💾 Cartoon saved: {output_path}")
            return str(output_path)
        else:
            print(f"❌ Failed to download cartoon: HTTP {response.status_code}")
            return None
            
    except Exception as e:
        print(f"❌ Download error: {str(e)}")
        return None

def test_fixed_cartoon():
    """Test the FIXED cartoon generation"""
    print("🔧 FIXED PLAYER CARTOON GENERATOR TEST")
    print("=" * 60)
    print("This version properly shows the photo to GPT-4o first!")
    
    # Test with Jose Alvarado's photo
    test_image = "static/mlb-photos/jose-alvarado-621237.jpg"
    test_player = "Jose Alvarado"
    
    if not Path(test_image).exists():
        print(f"❌ Test image not found: {test_image}")
        return
    
    print(f"🎯 Testing FIXED version with: {test_player}")
    print(f"📸 Image: {test_image}")
    print("🔍 This will actually analyze the photo first!")
    print()
    
    # Generate cartoon with fixed method
    result = create_player_cartoon_fixed(test_image, test_player)
    
    if result['success']:
        print(f"\\n🎉 SUCCESS! Generated cartoon for {test_player}")
        
        if 'cartoon_url' in result:
            print(f"🔗 Cartoon URL: {result['cartoon_url']}")
            
            # Download the cartoon
            local_path = download_cartoon(result['cartoon_url'], test_player, result['method'])
            if local_path:
                print(f"✅ FIXED test complete! Check {local_path}")
                print(f"📋 Method used: {result['method']}")
        
        if 'detailed_description' in result:
            print(f"📝 Player description: {result['detailed_description'][:200]}...")
        
    else:
        print(f"\\n❌ FAILED! Error: {result.get('error', 'Unknown error')}")
        if 'response' in result:
            print(f"GPT-4o Response: {result['response']}")

if __name__ == "__main__":
    # Check API key
    if not os.getenv('OPENAI_API_KEY'):
        print("❌ Please set OPENAI_API_KEY in your .env file")
        exit(1)
    
    print("🚀 Starting FIXED player cartoon test...")
    test_fixed_cartoon()
    print("\\n✅ FIXED test complete!")